package view;

import models.Circle;
import models.Line;
import models.Point;
import models.Shape;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;

public class PnlDrawing extends JPanel implements MouseListener {
    int mx, my;

    Point startLine = null;
    private ArrayList<Shape> shapes = new ArrayList<>();
    static int obj = 0;

    /**
     * Create the panel.
     */
    public PnlDrawing() {
        addMouseListener(this);
    }


    public ArrayList<Shape> getShapes() {
        return shapes;
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        mx = e.getX();
        my = e.getY();
        switch (obj) {
            case 1:
                Point p = new Point(false, mx, my);
                shapes.add(p);
                break;
            case 2:
                if (startLine == null) {
                    startLine = new Point(mx, my);
                } else {
                    Point endLine = new Point(mx, my);
                    Line line = new Line(false, startLine, endLine);
                    shapes.add(line);
                    startLine = null;
                }
                break;
            case 3:
                CircleInputDialog circleInputDialog = new CircleInputDialog();
                circleInputDialog.getxTxtField().setText(String.valueOf(mx));
                circleInputDialog.getyTxtField().setText(String.valueOf(my));
                circleInputDialog.getxTxtField().setEditable(false);
                circleInputDialog.getyTxtField().setEditable(false);
                circleInputDialog.setVisible(true);
                if (circleInputDialog.isOk == true) {
                    Circle c = new Circle(false, new Point(mx, my), Integer.parseInt(circleInputDialog.getR().getText())
                    );
                    shapes.add(c);
                }
                break;
        }
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        for (Shape shape : shapes) {
            shape.draw(g);
        }
        repaint();
    }

    @Override
    public void mousePressed(MouseEvent e) {

    }

    @Override
    public void mouseReleased(MouseEvent e) {

    }

    @Override
    public void mouseEntered(MouseEvent e) {

    }

    @Override
    public void mouseExited(MouseEvent e) {

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
    }
}
