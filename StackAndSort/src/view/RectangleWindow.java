package view;

import models.Rectangle;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Stack;

public class RectangleWindow extends JFrame {
    private Stack<Rectangle> rectangleStack;

    private ArrayList<Rectangle> rectangles;
    private DefaultListModel<String> listModel;
    private JList<String> rectangleList;


    public RectangleWindow() {
        rectangleStack = new Stack<>();
        listModel = new DefaultListModel<>();
        rectangleList = new JList<>(listModel);
        rectangles = new ArrayList<>();
        setVisible(true);
        setSize(700, 700);
        setTitle("Rectangle");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JButton addButton = new JButton("Add");
        addButton.addActionListener(e -> showDialogAndAddRectangle());

        JButton removeButton = new JButton("Remove");
        removeButton.addActionListener(e -> removeRectangleFromStack());

        JButton sortButton = new JButton("Sort");
        sortButton.addActionListener(e -> sortRectanglesByArea());

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(addButton);
        buttonPanel.add(removeButton);
        buttonPanel.add(sortButton);

        add(new JScrollPane(rectangleList), BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);



        setLocationRelativeTo(null);
    }

    private void showDialogAndAddRectangle() {
        RectangleInputDialog dialog = new RectangleInputDialog(this);
        if (dialog.showDialog()) {
            Rectangle rectangle = dialog.getRectangle();
            rectangle.setArea(rectangle.getHeight() * rectangle.getWidth());
            rectangleStack.push(rectangle);
            listModel.addElement(rectangle.toString());

            System.out.println(rectangle.getWidth());
        }
    }

    private void removeRectangleFromStack() {
        if (!rectangleStack.isEmpty()) {
            Rectangle removedRectangle = rectangleStack.pop();
            listModel.removeElement(removedRectangle.toString());
        }
    }


    private void sortRectanglesByArea() {
        ArrayList<Rectangle> sortedRectangles = new ArrayList<>(rectangleStack);
        Collections.sort(sortedRectangles, Comparator.comparingInt(r -> r.getWidth() * r.getHeight()));

        listModel.clear();
        for (Rectangle rectangle : sortedRectangles) {

            listModel.addElement(rectangle.toString());
        }
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
    }
}
